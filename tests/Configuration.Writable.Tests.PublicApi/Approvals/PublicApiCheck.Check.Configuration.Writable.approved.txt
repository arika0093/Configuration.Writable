[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/arika0093/Configuration.Writable")]
namespace Configuration.Writable.FileWriter
{
    public class CommonFileWriter : Configuration.Writable.FileWriter.IFileWriter, System.IDisposable
    {
        public CommonFileWriter() { }
        public virtual int BackupMaxCount { get; set; }
        public virtual int MaxRetryCount { get; set; }
        public virtual System.Func<int, int> RetryDelay { get; set; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        protected virtual void GenerateBackupFile(string path, Microsoft.Extensions.Logging.ILogger? logger) { }
        protected virtual string GetTemporaryFilePath(string path) { }
        public virtual System.Threading.Tasks.Task SaveToFileAsync(string path, System.ReadOnlyMemory<byte> content, System.Threading.CancellationToken cancellationToken = default, Microsoft.Extensions.Logging.ILogger? logger = null) { }
        protected virtual System.Threading.Tasks.Task WriteContentToFileAsync(string path, System.ReadOnlyMemory<byte> content, System.Threading.CancellationToken cancellationToken) { }
    }
    public interface IFileWriter
    {
        System.Threading.Tasks.Task SaveToFileAsync(string path, System.ReadOnlyMemory<byte> content, System.Threading.CancellationToken cancellationToken = default, Microsoft.Extensions.Logging.ILogger? logger = null);
    }
    public class InMemoryFileWriter : Configuration.Writable.FileWriter.IFileWriter
    {
        public InMemoryFileWriter() { }
        public void Clear() { }
        public void DeleteFile(string path) { }
        public bool FileExists(string path) { }
        public System.IO.Stream? GetFileStream(string path) { }
        public string[] GetFiles(string directory, string pattern = "*") { }
        public byte[] ReadAllBytes(string path) { }
        public string ReadAllText(string path) { }
        public System.Threading.Tasks.Task SaveToFileAsync(string path, System.ReadOnlyMemory<byte> content, System.Threading.CancellationToken cancellationToken = default, Microsoft.Extensions.Logging.ILogger? logger = null) { }
    }
}
namespace Configuration.Writable
{
    public interface IReadOnlyOptions<T> : Microsoft.Extensions.Options.IOptionsMonitor<T>
        where T :  class
    {
        Configuration.Writable.WritableConfigurationOptions<T> GetConfigurationOptions();
        Configuration.Writable.WritableConfigurationOptions<T> GetConfigurationOptions(string name);
    }
    public interface IWritableConfigProvider
    {
        string FileExtension { get; }
        Configuration.Writable.FileWriter.IFileWriter FileWriter { get; }
        void AddConfigurationFile(Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, System.IO.Stream stream);
        void AddConfigurationFile(Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, string path);
        System.ReadOnlyMemory<byte> GetSaveContents<T>(T config, Configuration.Writable.WritableConfigurationOptions<T> options)
            where T :  class;
        System.Threading.Tasks.Task SaveAsync<T>(T config, Configuration.Writable.WritableConfigurationOptions<T> options, System.Threading.CancellationToken cancellationToken = default)
            where T :  class;
    }
    public interface IWritableOptions<T> : Configuration.Writable.IReadOnlyOptions<T>, Microsoft.Extensions.Options.IOptionsMonitor<T>
        where T :  class
    {
        System.Threading.Tasks.Task SaveAsync(System.Action<T> configUpdator, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task SaveAsync(T newConfig, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task SaveAsync(string name, System.Action<T> configUpdator, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task SaveAsync(string name, T newConfig, System.Threading.CancellationToken cancellationToken = default);
    }
    public static class WritableConfig
    {
        public static Configuration.Writable.IWritableOptions<T> GetOption<T>()
            where T :  class { }
        public static void Initialize<T>()
            where T :  class { }
        public static void Initialize<T>(System.Action<Configuration.Writable.WritableConfigurationOptionsBuilder<T>> configurationOptions)
            where T :  class { }
    }
    public class WritableConfigJsonProvider : Configuration.Writable.WritableConfigProviderBase
    {
        public WritableConfigJsonProvider() { }
        public System.Text.Encoding Encoding { get; init; }
        public override string FileExtension { get; }
        public System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get; init; }
        public override void AddConfigurationFile(Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, System.IO.Stream stream) { }
        public override void AddConfigurationFile(Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, string path) { }
        public override System.ReadOnlyMemory<byte> GetSaveContents<T>(T config, Configuration.Writable.WritableConfigurationOptions<T> options)
            where T :  class { }
    }
    public abstract class WritableConfigProviderBase : Configuration.Writable.IWritableConfigProvider
    {
        protected WritableConfigProviderBase() { }
        public abstract string FileExtension { get; }
        public virtual Configuration.Writable.FileWriter.IFileWriter FileWriter { get; set; }
        public abstract void AddConfigurationFile(Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, System.IO.Stream stream);
        public abstract void AddConfigurationFile(Microsoft.Extensions.Configuration.IConfigurationBuilder configuration, string path);
        public abstract System.ReadOnlyMemory<byte> GetSaveContents<T>(T config, Configuration.Writable.WritableConfigurationOptions<T> options)
            where T :  class;
        public virtual System.Threading.Tasks.Task SaveAsync<T>(T config, Configuration.Writable.WritableConfigurationOptions<T> options, System.Threading.CancellationToken cancellationToken = default)
            where T :  class { }
        protected static object CreateNestedSection(string sectionName, object value) { }
        protected static string[] GetSplitedSections(string sectionName) { }
    }
    public class WritableConfigSimpleInstance<T>
        where T :  class
    {
        public WritableConfigSimpleInstance() { }
        public void Add(Configuration.Writable.WritableConfigurationOptionsBuilder<T> configurationBuilder) { }
        public void Add(System.Action<Configuration.Writable.WritableConfigurationOptionsBuilder<T>> configurationOptions) { }
        public Configuration.Writable.IWritableOptions<T> GetOption() { }
        public void Initialize() { }
        public void Initialize(Configuration.Writable.WritableConfigurationOptionsBuilder<T> configurationBuilder) { }
        public void Initialize(System.Action<Configuration.Writable.WritableConfigurationOptionsBuilder<T>> configurationOptions) { }
    }
    public static class WritableConfigurationExtensions
    {
        public static Microsoft.Extensions.Hosting.IHostApplicationBuilder AddUserConfigurationFile<T>(this Microsoft.Extensions.Hosting.IHostApplicationBuilder builder)
            where T :  class { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddUserConfigurationFile<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfigurationManager configuration)
            where T :  class { }
        public static Microsoft.Extensions.Hosting.IHostApplicationBuilder AddUserConfigurationFile<T>(this Microsoft.Extensions.Hosting.IHostApplicationBuilder builder, System.Action<Configuration.Writable.WritableConfigurationOptionsBuilder<T>> configureOptions)
            where T :  class { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddUserConfigurationFile<T>(this Microsoft.Extensions.Configuration.IConfigurationManager configuration, Microsoft.Extensions.DependencyInjection.IServiceCollection services, Configuration.Writable.WritableConfigurationOptionsBuilder<T> confBuilder)
            where T :  class { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddUserConfigurationFile<T>(this Microsoft.Extensions.Configuration.IConfigurationManager configuration, Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Configuration.Writable.WritableConfigurationOptionsBuilder<T>> configureOptions)
            where T :  class { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddUserConfigurationFile<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfigurationManager configuration, Configuration.Writable.WritableConfigurationOptionsBuilder<T> confBuilder)
            where T :  class { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddUserConfigurationFile<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfigurationManager configuration, System.Action<Configuration.Writable.WritableConfigurationOptionsBuilder<T>> configureOptions)
            where T :  class { }
    }
    public class WritableConfigurationOptionsBuilder<T> : System.IEquatable<Configuration.Writable.WritableConfigurationOptionsBuilder<T>>
        where T :  class
    {
        public WritableConfigurationOptionsBuilder() { }
        public string ConfigFilePath { get; }
        public string? FilePath { get; set; }
        public System.IO.Stream? FileReadStream { get; set; }
        public Configuration.Writable.FileWriter.IFileWriter? FileWriter { get; set; }
        public string InstanceName { get; set; }
        public Microsoft.Extensions.Logging.ILogger? Logger { get; set; }
        public Configuration.Writable.IWritableConfigProvider Provider { get; set; }
        public bool RegisterInstanceToContainer { get; set; }
        public string SectionName { get; }
        public string SectionRootName { get; set; }
        public Configuration.Writable.WritableConfigurationOptions<T> BuildOptions() { }
        public void UseInMemoryFileWriter(Configuration.Writable.FileWriter.InMemoryFileWriter inMemoryFileWriter) { }
        public string UseStandardSaveLocation(string applicationId) { }
    }
    public class WritableConfigurationOptions<T> : System.IEquatable<Configuration.Writable.WritableConfigurationOptions<T>>
        where T :  class
    {
        public WritableConfigurationOptions() { }
        public required string ConfigFilePath { get; init; }
        public Microsoft.Extensions.Logging.ILogger? EffectiveLogger { get; }
        public required string InstanceName { get; init; }
        public Microsoft.Extensions.Logging.ILogger? Logger { get; init; }
        public required Configuration.Writable.IWritableConfigProvider Provider { get; init; }
        public required string SectionName { get; init; }
    }
}
namespace Configuration.Writable.Testing
{
    public static class WritableOptionsStub
    {
        public static Configuration.Writable.Testing.WritableOptionsStub<T> Create<T>(System.Collections.Generic.Dictionary<string, T> namedValues)
            where T :  class { }
        public static Configuration.Writable.Testing.WritableOptionsStub<T> Create<T>(T value)
            where T :  class { }
    }
    public class WritableOptionsStub<T> : Configuration.Writable.IReadOnlyOptions<T>, Configuration.Writable.IWritableOptions<T>, Microsoft.Extensions.Options.IOptionsMonitor<T>
        where T :  class
    {
        public WritableOptionsStub(System.Collections.Generic.Dictionary<string, T> namedValues) { }
        public WritableOptionsStub(T value) { }
        public T CurrentValue { get; }
        public T Get(string? name) { }
        public Configuration.Writable.WritableConfigurationOptions<T> GetConfigurationOptions() { }
        public Configuration.Writable.WritableConfigurationOptions<T> GetConfigurationOptions(string name) { }
        public System.IDisposable? OnChange(System.Action<T, string?> listener) { }
        public System.Threading.Tasks.Task SaveAsync(System.Action<T> configUpdator, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task SaveAsync(T newConfig, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task SaveAsync(string name, System.Action<T> configUpdator, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task SaveAsync(string name, T newConfig, System.Threading.CancellationToken cancellationToken = default) { }
    }
}